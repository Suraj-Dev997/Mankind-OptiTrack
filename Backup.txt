import React, {useState, useEffect} from 'react';
import {
  View,
  Text,
  Image,
  StyleSheet,
  TouchableOpacity,
  FlatList,
  ActivityIndicator,
  Alert,
  ScrollView,
  KeyboardAvoidingView,
  _ScrollView
} from 'react-native';
import {TextInput, Button, Avatar, DefaultTheme} from 'react-native-paper';
import ImagePicker from 'react-native-image-crop-picker';
import DateTimePicker from '@react-native-community/datetimepicker';
import {Picker} from '@react-native-picker/picker';
import {useNavigation} from '@react-navigation/native';
import {BASE_URL} from '../Configuration/Config';
import {useRoute} from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {format} from 'date-fns';
import LinearGradient from 'react-native-linear-gradient';

const DEAddCampReport = () => {
  const [doctorNames, setDoctorNames] = useState([]);
  const [selectedDoctor, setSelectedDoctor] = useState('');
  const [filteredDoctorNames, setFilteredDoctorNames] = useState([]);
  const [qualification, setQualification] = useState('');
  const [avatarUri, setAvatarUri] = useState(null); // To store the URI of the selected image
  const [campDate, setCampDate] = useState(new Date());
  const [showCampDatePicker, setShowCampDatePicker] = useState(false);
  const [campname, setCampName] = useState();
  const [loction, setLocation] = useState();
  const [doctor1, setDoctor1] = useState();
  const [doctor2, setDoctor2] = useState();
  const [doctor3, setDoctor3] = useState();
  const [doctor4, setDoctor4] = useState();
  const navigation = useNavigation();
  const [isLoading, setIsLoading] = useState(true);
  const [textInputValue, setTextInputValue] = useState('');
  const [isDropdownVisible, setIsDropdownVisible] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const route = useRoute();
  const {id} = route.params;
  const formattedCampDate = format(campDate, 'dd-MM-yyyy');
  const [mrNames, setMrNames] = useState([]); // State to store MR names
  const [centerNames, setCenterNames] = useState([]); // State to store MR names
  const initialSelectedMr = 'Name of MR';

  const [selectedMr, setSelectedMr] = useState(mrData && mrData.length > 0 ? mrData[0].empcode : null);
  const [selectedCenter, setSelectedCenter] = useState('');
  const [mrHQs, setMrHQs] = useState({}); // Store MR HQs
  const [selectedMrInfo, setSelectedMrInfo] = useState({
    empcode: '',
    hq: '',
    name: '',
  });
  const [selectedCenterInfo, setSelectedCenterInfo] = useState({
    cid: '',
    center_name: '',
  });
  const [mrData, setMrData] = useState([]);
  const [centerData, setCenterData] = useState([]);
  const [role, setRole] = useState([]);

  const [empCodeMain, setEmpCodeMain] = useState(null);
  useEffect(() => {
    fetchMrData();
    fetchCenterData();
  }, [id]);
 
  const fetchMrData = async () => {
    try {
      const ApiUrl = `${BASE_URL}${'/report/getMrList'}`;
      const response = await fetch(ApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          empcode: 10000945, // Example empcode, replace it with the actual value
        }),
      });

      const data = await response.json();
      // console.log('MR data:', data);
      if (Array.isArray(data) && data.length > 0) {
        const names = data.map((mr) => mr.name);
       
        setMrNames(names);
        setSelectedMr(data.length > 0 ? data[0].empcode : null)
        console.log("mr s",selectedMr);
        setMrData(data);
        // console.log('MR Names:', names);
        
      }
    } catch (error) {
      console.error('Error fetching MR data:', error);
    }
  };
  const fetchCenterData = async () => {
    try {
      const ApiUrl = `${BASE_URL}${'/report/getCenterLIst'}`;
      const response = await fetch(ApiUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
       
      });

      const data = await response.json();
      console.log('Center data:', data);
      setCenterData(data)
      setSelectedCenter(data.length > 0 ? data[0].cid : null)
      console.log('Center data:', data);
      if (Array.isArray(data) && data.length > 0) {
        const names = data.map((mr) => mr.center_name);
       
        setCenterNames(names);
       
        console.log('Center Names:', names);
     
      }
    } catch (error) {
      console.error('Error fetching MR data:', error);
    }
  };



  const handleMrChange = (value,index) => {
    setSelectedMr(value);
    console.log("mr selected",value);

  
 

    // Find the MR info for the selected MR
    const selectedMrInfo = mrData.find(mr => mr.empcode === value);

    // Update the selectedMrInfo state with the new MR info
    setSelectedMrInfo(selectedMrInfo);
  };

  const handleCenterChange = (value,index) => {
    setSelectedCenter(value);

    // Find the MR info for the selected MR
    const selectedCenterInfo = centerData.find(center => center.cid === value);

    // Update the selectedMrInfo state with the new MR info
    setSelectedCenterInfo(selectedCenterInfo);
  };



  // useEffect(() => {
   
  //   const ApiUrl = `${BASE_URL}${'/doc/getDoctorWithUserId'}`;

  
  //   AsyncStorage.getItem('userdata')
  //     .then(data => {
  //       if (data) {
  //         const userData = JSON.parse(data);
  //         const userId = userData.responseData.user_id;

      
  //         console.log('Getting user id:', userId);

       
  //         return fetch(ApiUrl, {
  //           method: 'POST',
  //           headers: {
  //             'Content-Type': 'application/json',
  //           },
  //           body: JSON.stringify({
  //             userId: userId, 
  //             subCatId: id,
  //           }),
  //         });
  //       } else {
  //         console.log('Invalid or missing data in AsyncStorage');
  //       }
  //     })
  //     .then(response => {
  //       if (!response) {
  //         return; 
  //       }
  //       return response.json();
  //     })
  //     .then(data => {
  //       if (Array.isArray(data) && data.length > 0) {
   
  //         console.log(data);
  //         const names = data.map(doctor => doctor.doctor_name);
  //         setDoctorNames(names);
  //         console.log(names);
  //       }
  //     })
  //     .catch(error => {
  //       console.log('Error fetching doctor names:', error);
  //     });
  //     fetchMrData();
  // }, [id]);

  const toggleDropdown = () => {
    setIsDropdownVisible(!isDropdownVisible);
  };




  


  const handleCampDateChange = (event, selectedDate) => {
    setShowCampDatePicker(false);
    if (selectedDate) {
      // Parse the date string in "dd-mm-yyyy" format to create a new Date object
      const day = selectedDate.getDate();
      const month = selectedDate.getMonth() + 1;
      const year = selectedDate.getFullYear();
      const newDate = new Date(year, month - 1, day); // Month is 0-indexed

      setCampDate(newDate);
    }
  };
  const showCampDate = () => {
    setShowCampDatePicker(true);
  };


  const submitData = () => {
    // Fetch the userId from AsyncStorage
    AsyncStorage.getItem('userdata')
      .then(data => {
        if (data) {
          const userData = JSON.parse(data);
          const userId = userData.responseData.user_id;
          const empID = userData.responseData.empID;

          // Define the payload using the retrieved userId
          const payload = {
            userId: userId, // Use the retrieved userId here
            subCatId: id,
            campName:campname,
            campLocation:loction,
            campCenter:selectedCenter,
            mrcode:selectedMr,
            doc1:doctor1,
            doc2:doctor2,
            doc3:doctor3,
            doc4:doctor4,
            campDate: formattedCampDate,
          };
          console.log('Payload after', payload);
          console.log('another details', selectedMr);
          console.log('another details', selectedCenter);
          const ApiUrl = `${BASE_URL}${'/eyeReport/addReportWithInfo'}`;

          // Make the POST request
          return fetch(ApiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
          });
        } else {
          console.log('Invalid or missing data in AsyncStorage');
          return Promise.reject('Invalid or missing data in AsyncStorage');
        }
      })
      .then(response => response.json())
      .then(data => {
        // Handle the response from the API
        console.log('API Response:', data);

        // Check if the API request was successful
        if (data.errorCode === '1') {
          // Navigate to the "AddCampData" screen on success
          navigation.navigate('DEAddCampData', {crid: data.ecrid, id});
          console.log('navigation values', id);
        } else {
          // Handle any other logic or display an error message
          console.log('API Request was not successful');
          // Display an alert message for the user
          alert('API Request was not successful');
        }
      })
      .catch(error => {
        console.error('Error submitting data:', error);
        // Handle the error, e.g., display an error message to the user
        alert('Error submitting data. Please try again later.');
      });
  };

  return (
    <LinearGradient colors={['#a6e9ff', '#a6e9ff']} style={styles.container}>
     <ScrollView>
      {/* {isLoading && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#383887" />
        </View>
      )} */}
      
      <View style={styles.container}>
        <View style={styles.form}>
        <View style={styles.datePickerContainer}>
            <Text style={styles.datePickerLabel} onPress={showCampDate}>
              Select Date of Camp:
            </Text>
            <Button
              style={styles.datePickerButton}
              onPress={showCampDate}
              labelStyle={styles.addbtnText1}>
              {campDate.getDate().toString().padStart(2, '0')}-
              {(campDate.getMonth() + 1).toString().padStart(2, '0')}-
              {campDate.getFullYear()}
            </Button>
            {showCampDatePicker && (
              <DateTimePicker
                value={campDate}
                mode="date"
                is24Hour={true}
                display="default"
                dateFormat="DD-MM-YYYY"
                onChange={handleCampDateChange}
              />
            )}
          </View>
          <Text style={styles.datePickerLabel}>Select Name of MR:</Text>
          <View style={styles.pickcontainer}>
            <Picker
              selectedValue={selectedMr}
              style={styles.picker}
              // onValueChange={handleMrChange}>
               onValueChange={(value, index) => handleMrChange(value, index)}>
              {mrData.map((mr, index) => (
                <Picker.Item key={mr.empcode} label={mr.name} value={mr.empcode} />
              ))}
            </Picker>
          </View>
          
          <Text style={styles.datePickerLabel}>Camp Name</Text>
          <TextInput
            // label="HQ"
            value={campname}
            onChangeText={text => setCampName(text)}
            mode="outlined"
            style={styles.input}
            outlineColor="#383887"
            activeOutlineColor="#08a5d8"
           
          />
          <Text style={styles.datePickerLabel}>Type of center:</Text>
          <View style={styles.pickcontainer}>
            <Picker
              selectedValue={selectedCenter}
              style={styles.picker}
              // onValueChange={handleCenterChange}>
              onValueChange={(value, index) => handleCenterChange(value, index)}>
              {centerData.map((camp, index) => (
                <Picker.Item key={camp.cid} label={camp.center_name} value={camp.cid} />
              ))}
            </Picker>
          </View>

          <Text style={styles.datePickerLabel}>Camp Location</Text>
          <TextInput
            // label="HQ"
            value={loction}
            onChangeText={text => setLocation(text)}
            mode="outlined"
            style={styles.input}
            outlineColor="#383887"
            activeOutlineColor="#08a5d8"
         
          />
          <Text style={styles.datePickerLabel}>Doctor 1 Name</Text>
          <TextInput
            // label="HQ"
            value={doctor1}
            onChangeText={text => setDoctor1(text)}
            mode="outlined"
            style={styles.input}
            outlineColor="#383887"
            activeOutlineColor="#08a5d8"
        
          />
           <Text style={styles.datePickerLabel}>Doctor 2 Name</Text>
          <TextInput
            // label="HQ"
            value={doctor2}
            onChangeText={text => setDoctor2(text)}
            mode="outlined"
            style={styles.input}
            outlineColor="#383887"
            activeOutlineColor="#08a5d8"
        
          />
           <Text style={styles.datePickerLabel}>Doctor 3 Name</Text>
          <TextInput
            // label="HQ"
            value={doctor3}
            onChangeText={text => setDoctor3(text)}
            mode="outlined"
            style={styles.input}
            outlineColor="#383887"
            activeOutlineColor="#08a5d8"
         
          />
          <Text style={styles.datePickerLabel}>Doctor 4 Name</Text>
          <TextInput
            // label="HQ"
            value={doctor4}
            onChangeText={text => setDoctor4(text)}
            mode="outlined"
            style={styles.input}
            outlineColor="#383887"
            activeOutlineColor="#08a5d8"
       
          />
          <LinearGradient colors={['#383887', '#092d4f']} style={styles.addbtn}>
            <Button onPress={submitData} labelStyle={styles.addbtnText}>
              Next
            </Button>
          </LinearGradient>
        </View>
      </View>
      </ScrollView>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)', // Semi-transparent background
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 1, // Place it above other UI components
  },
  inputContainer: {
    borderColor: '#383887',
    borderWidth: 1,
    borderRadius: 5,
    marginBottom: 15,
    overflow: 'hidden',
    backgroundColor: '#fff',
  },
  inputField: {
    padding: 0,
    fontSize: 15,
  },
  dropdownList: {
    maxHeight: 150, // Set a max height for the dropdown list
    borderColor: '#ccc',
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderRadius: 5,
  },
  dropdownItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  additionalInputLabel: {
    marginTop: 16,
    fontSize: 16,
  },
  additionalInput: {
    borderColor: '#383887',
    borderWidth: 1,
    padding: 10,
    borderRadius: 5,
    fontSize: 16,
  },
  datePickerContainer: {
    flexDirection: 'column',
    // alignItems:'center'
  },
  pickcontainer: {
    backgroundColor: 'white',
    borderWidth: 1,
    borderColor: '#383887',
    borderRadius: 5,
    marginBottom: 15,
  },
  picker: {
    // backgroundColor:'#fff',
    width: '100%',
    borderWidth: 1,
    borderColor: '#383887',
    borderRadius: 5,
    padding: 0,
  },
  datePickerLabel: {
    fontSize: 14, // You can adjust the font size as needed
    marginBottom: 0, // Spacing between label and button
    color: '#383887',
    fontWeight: '600',
  },
  datePickerButton: {
    width: 'auto',
    borderRadius: 5,
    textAlign: 'left',
    alignItems: 'flex-start',
    fontSize: 16, // You can adjust the font size as needed
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#383887',
    padding: 5,
    marginBottom: 12,
  },
  container: {
    // backgroundColor:'#B9D9EB',
    flex: 1,
    padding: 16,
  },
  form: {
    marginTop: 40,
    flex: 1,
  },
  input: {
    borderColor: 'blue',
    marginBottom: 12,
  },
  profileimg: {},
  button: {
    marginTop: 16,
  },
  avatarContainer: {
    alignItems: 'center',
    marginBottom: 16,
  },
  changeAvatarText: {
    color: '#383887',
    textAlign: 'center',
  },
  addbtn: {
    backgroundColor: '#383887',
    paddingLeft: 1,
    paddingRight: 1,
    color: 'white',
    marginTop: 8,
    marginBottom: 10,
    borderRadius: 50,
  },
  addbtn1: {
    color: '#fff',
  },
  addbtnText: {
    color: '#fff', // Set the text color here
  },
  addbtnText1: {
    color: '#474747', // Set the text color here
  },
});

export default DEAddCampReport;
